package io.github.wimdeblauwe.vite.spring.boot;


import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.context.properties.bind.Binder;
import org.springframework.context.ApplicationContextInitializer;
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.core.env.MapPropertySource;
import org.springframework.core.env.MutablePropertySources;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.util.Map;

import static io.github.wimdeblauwe.vite.spring.boot.ViteDevServerConfigurationProperties.PREFIX;

/**
 * This ApplicationContextInializer will automatically set the property values of {@link ViteDevServerConfigurationProperties}
 * by reading the `server-config.json` file that is generated by the vite-plugin-spring-boot npm package.
 * Due to that, Spring Boot knows where the Vite live reload server is hosting the assets.
 */
public class ViteServerConfigurationPropertiesContextInitializer implements ApplicationContextInitializer<ConfigurableApplicationContext> {
  private static final Logger LOGGER = LoggerFactory.getLogger(ViteServerConfigurationPropertiesContextInitializer.class);
  private static final String PROPERTY_FILE_PREFX = PREFIX + ".";

  @Override
  public void initialize(ConfigurableApplicationContext applicationContext) {
    try {
      Path path = getDevServerConfigFilePath(applicationContext);
      if (path.toFile().exists()) {
        ObjectMapper objectMapper = new ObjectMapper();
        Map map = objectMapper.readValue(path.toFile(), Map.class);

        MapPropertySource hostPropertySource = new MapPropertySource(PROPERTY_FILE_PREFX + "host",
                                                                     Map.of(PROPERTY_FILE_PREFX + "host", map.get("host")));
        MapPropertySource portPropertySource = new MapPropertySource(PROPERTY_FILE_PREFX + "port",
                                                                     Map.of(PROPERTY_FILE_PREFX + "port", map.get("port")));
        MutablePropertySources propertySources = applicationContext.getEnvironment().getPropertySources();
        propertySources.addFirst(hostPropertySource);
        propertySources.addFirst(portPropertySource);
      } else {
        LOGGER.debug("Could not find {} - Unable to load information on Vite Dev Server", path.toAbsolutePath());
      }
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  private static Path getDevServerConfigFilePath(ConfigurableApplicationContext applicationContext) {
    ConfigurableEnvironment environment = applicationContext.getEnvironment();
    ViteConfigurationProperties properties = Binder.get(environment).bind("vite", ViteConfigurationProperties.class).orElse(null);
    if( properties != null && properties.devServerConfigFileLocation() != null ) {
      return properties.devServerConfigFileLocation();
    }
    return Path.of(getDefaultOutputDirectory(), "dev-server-config.json");
  }

  private static String getDefaultOutputDirectory() {
    if (new File("pom.xml").exists()) {
      return "target/vite-plugin-spring-boot";
    }
    return "build/vite-plugin-spring-boot";
  }
}
